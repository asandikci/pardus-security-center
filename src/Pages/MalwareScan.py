import gi
import subprocess

gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
from libpardus import Ptk
from gi.repository import Gtk, Adw, Gio
from locale import gettext as _

import MainWindow

class Menu(Ptk.ScrolledWindow):
    def __init__(self, *args, app, **kwargs):
        super().__init__(*args, **kwargs)
        self.app = app

        self.daemon_management()

        self.set_scan_ui()

    def daemon_management(self):
        pass

    def set_scan_ui(self):
        self.scan_preferences = Adw.PreferencesGroup(
            margin_start=50, margin_end=50, margin_top=20
        )
        self.scan_preferences.set_title(_("Start Scanning"))
        self.scan_preferences.set_description(_("Start malware scanning with ClamAV"))

        self.complete_scan(self.scan_preferences)

        self.custom_scan(self.scan_preferences)

        self.realtime_scan(self.scan_preferences)

        self.set_child(self.scan_preferences)

    def complete_scan(self, parent):

        # Button action for complete scan
        start_complete_scan = Gio.SimpleAction(name="complete-scan")
        start_complete_scan.connect("activate", self.start_complete_scan)
        self.app.add_action(start_complete_scan)

        self.complete_scan_box = Adw.ActionRow(valign="GTK_ALIGN_START")
        self.complete_scan_box.set_title(_("Complete Scan"))
        self.complete_scan_box.set_subtitle(
            _("Scan user directory completely (It might take a while)")
        )
        self.complete_scan_box.add_suffix(
            Gtk.Button(
                icon_name="media-playback-start-symbolic",
                action_name="app.complete-scan",
                valign=Gtk.Align.CENTER,
            )
        )

        parent.add(self.complete_scan_box)

    def custom_scan(self, parent):

        # Button action for custom file scan
        scan_file_action = Gio.SimpleAction(name="scan-file")
        scan_file_action.connect("activate", self.on_action_win_scan_file_activated)
        self.app.add_action(scan_file_action)

        # Button action for complete folder scan
        scan_folder_action = Gio.SimpleAction(name="scan-folder")
        scan_folder_action.connect("activate", self.on_action_win_scan_folder_activated)
        self.app.add_action(scan_folder_action)

        self.custom_scan_box = Adw.ActionRow(valign="GTK_ALIGN_START")
        self.custom_scan_box.set_title(_("Custom Scan"))
        self.custom_scan_box.set_subtitle(_("Scan a folder or directory"))

        self.open_buttons = Gtk.Box(spacing=7, valign="GTK_ALIGN_CENTER")

        select_file_box = Ptk.Box(spacing=5)
        icon = Gtk.Image(icon_name="folder-documents-symbolic")
        label = Gtk.Label(label=_("File"))
        select_file_box.append(icon)
        select_file_box.append(label)

        select_folder_box = Ptk.Box(spacing=5)
        icon = Gtk.Image(icon_name="folder-symbolic")
        label = Gtk.Label(label=_("Folder"))
        select_folder_box.append(icon)
        select_folder_box.append(label)

        self.open_buttons.append(
            Gtk.Button(child=select_file_box, action_name="app.scan-file")
        )
        self.open_buttons.append(
            Gtk.Button(child=select_folder_box, action_name="app.scan-folder")
        )

        self.custom_scan_box.add_suffix(self.open_buttons)

        parent.add(self.custom_scan_box)

    def realtime_scan(self, parent):
        self.realtime_scan_box = Adw.ActionRow(valign="GTK_ALIGN_START")
        self.realtime_scan_box.set_title(_("Realtime Scan"))
        self.realtime_scan_box.set_subtitle(_("Activate/deactivate realtime scan"))
        self.realtime_scan_box.add_suffix(
            Gtk.Switch(active=False, valign="GTK_ALIGN_CENTER")
        )

        parent.add(self.realtime_scan_box)

    def on_action_win_scan_file_activated(self, action, params):
        self._open_file_chooser = Gtk.FileChooserNative(
            title=_("Open File to Scan"),
            action=Gtk.FileChooserAction.OPEN,
            accept_label=_("_Select"),
            cancel_label=_("_Cancel"),
        )

        self._open_file_chooser.connect("response", self.on_file_dialog_response)
        self._open_file_chooser.show()

    def on_action_win_scan_folder_activated(self, action, params):
        self._open_folder_chooser = Gtk.FileChooserNative(
            title=_("Select Folder to Scan"),
            action=Gtk.FileChooserAction.SELECT_FOLDER,
            accept_label=_("_Select Folder"),
            cancel_label=_("_Cancel"),
        )

        self._open_folder_chooser.connect("response", self.on_folder_dialog_response)
        self._open_folder_chooser.show()

    def on_file_dialog_response(self, dialog, response):
        if response == Gtk.ResponseType.ACCEPT:
            file_path = dialog.get_file().get_path()
            self.get_subprocess_outputs(self, subprocess.run(["clamscan", file_path], capture_output=True))
        
        self._open_file_chooser = None

    def on_folder_dialog_response(self, dialog, response):
        if response == Gtk.ResponseType.ACCEPT:
            folder_path = dialog.get_current_folder().get_path()
            self.get_subprocess_outputs(self, subprocess.run(["clamscan", "-r", folder_path], capture_output=True))
        
        self._open_folder_chooser = None

    def start_complete_scan(self, action, params):
        print("started !")
        pass

    def get_subprocess_outputs(self, *args):
        print(args[1].args)
        stdout = args[1].stdout.decode("utf-8")
        stderr = args[1].stderr.decode("utf-8")
        cmd = " ".join(str(x) for x in args[1].args)

        MainWindow.MainWindow.update_terminal(MainWindow.MainWindow, cmd=cmd, stdout=stdout, stderr=stderr)